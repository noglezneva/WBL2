package main

import "fmt"

/*
	Паттерн "Стратегия" — это поведенческий паттерн проектирования,
	который определяет семейство схожих алгоритмов и помещает каждый
	из них в собственный класс, после чего алгоритмы можно
	взаимозаменять прямо во время исполнения программы.

	Паттерн "Стратегия" применим, когда у нас есть задача,
	которую нужно выполнить разными способами, или когда нам нужно
	динамически менять алгоритм выполнения задачи во время выполнения
	программы. Это позволяет отделить алгоритм от клиентского кода и
	делает его заменяемым.

	Плюсы:
	* Позволяет легко менять алгоритмы, даже во время выполнения программы, без изменения клиентского кода.
	* Обеспечивает легкую поддержку различных вариантов алгоритмов, которые могут быть использованы в приложении.
	* Позволяет избежать условных операторов и избыточных ветвлений в коде, упрощая его читаемость и поддержку.

	Минусы:
	* Может привести к увеличению количества классов из-за необходимости создания различных стратегий.
	* Клиентский код должен знать о различных стратегиях, что может нарушить принцип инверсии зависимостей.

	Один из практических примеров использования паттерна "Стратегия" -
	это сортировка элементов в программе. Предположим, у нас есть
	абстрактный класс Sorter и две конкретные реализации:
	BubbleSorter и QuickSorter. Мы можем создать стратегии сортировки и
	динамически выбирать соответствующую стратегию в зависимости от
	условий или предпочтений пользователя.
*/
// Интерфейс стратегии сортировки
type SortStrategy interface {
	Sort(data []int)
}

// Конкретная реализация стратегии пузырьковой сортировки
type BubbleSortStrategy struct{}

func (strategy BubbleSortStrategy) Sort(data []int) {
	fmt.Println("Сортировка пузырьком:", data)
	// Реализация пузырьковой сортировки
}

// Конкретная реализация стратегии быстрой сортировки
type QuickSortStrategy struct{}

func (strategy QuickSortStrategy) Sort(data []int) {
	fmt.Println("Быстрая сортировка:", data)
	// Реализация быстрой сортировки
}

// Контекст, использующий стратегию сортировки
type SortContext struct {
	strategy SortStrategy
}

func (context SortContext) Sort(data []int) {
	context.strategy.Sort(data)
}

func main() {
	// Создание стратегий
	bubbleSortStrategy := BubbleSortStrategy{}
	quickSortStrategy := QuickSortStrategy{}

	// Создание контекста с пузырьковой сортировкой
	context := SortContext{strategy: bubbleSortStrategy}
	data := []int{4, 2, 7, 1, 5}
	context.Sort(data)

	// Изменение стратегии на быструю сортировку
	context.strategy = quickSortStrategy
	context.Sort(data)
}

/*
у нас есть интерфейс SortStrategy и две реализации:
BubbleSortStrategy и QuickSortStrategy.
У контекста SortContext есть поле для хранения выбранной стратегии
сортировки. Метод Sort() контекста делегирует вызов соответствующему
методу стратегии.

Клиентский код создает экземпляры стратегий (например, BubbleSortStrategy
 и QuickSortStrategy) и передает их в контекст SortContext.
 Затем клиентский код вызывает метод Sort() контекста, который выполняет
 сортировку, используя выбранную стратегию.

Таким образом, паттерн "Стратегия" позволяет легко заменять
алгоритмы выполнения задачи, выбирая подходящую стратегию во время
выполнения программы.
*/
